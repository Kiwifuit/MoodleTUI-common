from rich.logging import RichHandler
from rich.console import Console
from logging import Logger
from enum import Enum


class LogLevel(Enum):
    """
    Log Levels

    Values are exactly the same
    as defined in the python
    documentation
    """

    NOTSET = 0
    DEBUG = 10
    INFO = 20
    WARN = 30
    ERROR = 40


def strToLogLevel(level: str) -> LogLevel:
    """
    Returns a Log Level from a string

    Returns NOTSET if the function
    cannot guess the level

    Parameters
    ----------
    level : str
        Level to convert

    Returns
    -------
    LogLevel
        LogLevel
    """
    match level.upper().strip("'\" \\"):
        case "NOTSET":
            return LogLevel.NOTSET
        case "DEBUG":
            return LogLevel.DEBUG
        case "INFO":
            return LogLevel.INFO
        case "WARN":
            return LogLevel.WARN
        case "ERROR":
            return LogLevel.ERROR
        case _:
            return LogLevel.NOTSET


def buildLogger(level: str, console: Console) -> Logger:
    """
    Builds a rich logger

    Parameters
    ----------
    level : str
        Log Level
    console : Console
        Console to output the logs

    Returns
    -------
    Logger
        Logger generated by the function
    """
    res = Logger("logger")
    handler = RichHandler(
        strToLogLevel(level).value,
        console=console,
        show_level=True,
        show_time=True,
        tracebacks_suppress=(KeyboardInterrupt, EOFError),
    )

    res.addHandler(handler)
    return res
